syntax = "proto3";  // 定義要使用的 protocol buffer 版本

option go_package = "device/core/service";
package service;

enum DataType {
  Sensor = 0;
  Controller = 1;
}

message UpdateRawdataRequest {
  DataType type = 1;
  Rawdata data = 2;
}

message Rawdata {
  string mac = 1;
  string virtualID =2;
  string time = 3;
  map<uint32, SensorValue> values = 4;
}

message SensorValue {
  double value = 1;
  uint32 dp = 2;
}

message UpdateRawdataResponse {
  bool success = 1;
  string mac = 2;
  string error = 3;
}

message GetStateMapRequest {
  repeated string deviceID = 1;
}

message GetStateMapResponse {
  map<string, string> stateMap = 1;
}

message GetValueMapRequest {
  DataType type = 1;
  repeated string deviceIDs = 2;
}

message GetValueMapResponse {
  string deviceID = 1;
  map<uint32, double> valueMap = 2;
}

message RemoteRequest {
  string deviceID = 1;
  uint32 device = 2;
  uint32 address = 3;
  double value = 4;
}

message RemoteResponse {
  bool success = 1;
  string error = 2;
}

enum DeviceState {
  ToBeRepaired = 0;
  Used = 1;
  Assigned = 2;
  Reserved = 3;
  Stock = 4;
}

message UpdateDeviceStateRequest {
  DeviceState state = 1;
  repeated string macAddress = 2;
  string comment = 3;
}

message UpdateDeviceStateResponse {
  bool success = 1;
  string macAddress = 2;
  string error = 3;
}

service CoreDeviceService {
  // 更新裝置上傳數據
  rpc UpdateRawdata(stream UpdateRawdataRequest) returns (stream UpdateRawdataResponse) {};
  // 取得所有裝置連線狀態
  rpc GetStateMap(GetStateMapRequest) returns (GetStateMapResponse) {};
  // 取得裝置中所有欄位數值
  rpc GetValueMap(GetValueMapRequest) returns (stream GetValueMapResponse) {};
  // 遠端指令至裝置
  rpc Remote(RemoteRequest) returns (RemoteResponse) {};
  // 更新裝置狀態
  rpc UpdateDeviceState(UpdateDeviceStateRequest) returns (stream UpdateDeviceStateResponse) {};
}