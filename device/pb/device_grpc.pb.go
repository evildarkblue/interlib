// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: device/proto/device.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	// 更新裝置上傳數據
	UpdateRawdata(ctx context.Context, opts ...grpc.CallOption) (DeviceService_UpdateRawdataClient, error)
	// 更新即時設定值
	UpdateRealtime(ctx context.Context, opts ...grpc.CallOption) (DeviceService_UpdateRealtimeClient, error)
	// Get VirtualId by stream
	GetVritualIdStream(ctx context.Context, opts ...grpc.CallOption) (DeviceService_GetVritualIdStreamClient, error)
	// BackupData
	BackupRawdata(ctx context.Context, opts ...grpc.CallOption) (DeviceService_BackupRawdataClient, error)
	// Get VirtualId
	GetVritualId(ctx context.Context, in *GetVirtualIdRequest, opts ...grpc.CallOption) (*GetVirtualIdResponse, error)
	// Set Time 校時
	SetTime(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Response, error)
	// 遠端控制
	Remote(ctx context.Context, in *RemoteRequest, opts ...grpc.CallOption) (*RemoteResponse, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) UpdateRawdata(ctx context.Context, opts ...grpc.CallOption) (DeviceService_UpdateRawdataClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceService_ServiceDesc.Streams[0], "/device.DeviceService/UpdateRawdata", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceUpdateRawdataClient{stream}
	return x, nil
}

type DeviceService_UpdateRawdataClient interface {
	Send(*UpdateRawdataRequest) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type deviceServiceUpdateRawdataClient struct {
	grpc.ClientStream
}

func (x *deviceServiceUpdateRawdataClient) Send(m *UpdateRawdataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceServiceUpdateRawdataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) UpdateRealtime(ctx context.Context, opts ...grpc.CallOption) (DeviceService_UpdateRealtimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceService_ServiceDesc.Streams[1], "/device.DeviceService/UpdateRealtime", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceUpdateRealtimeClient{stream}
	return x, nil
}

type DeviceService_UpdateRealtimeClient interface {
	Send(*UpdateRawdataRequest) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type deviceServiceUpdateRealtimeClient struct {
	grpc.ClientStream
}

func (x *deviceServiceUpdateRealtimeClient) Send(m *UpdateRawdataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceServiceUpdateRealtimeClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) GetVritualIdStream(ctx context.Context, opts ...grpc.CallOption) (DeviceService_GetVritualIdStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceService_ServiceDesc.Streams[2], "/device.DeviceService/GetVritualIdStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceGetVritualIdStreamClient{stream}
	return x, nil
}

type DeviceService_GetVritualIdStreamClient interface {
	Send(*GetVirtualIdRequest) error
	Recv() (*GetVirtualIdStreamResponse, error)
	grpc.ClientStream
}

type deviceServiceGetVritualIdStreamClient struct {
	grpc.ClientStream
}

func (x *deviceServiceGetVritualIdStreamClient) Send(m *GetVirtualIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceServiceGetVritualIdStreamClient) Recv() (*GetVirtualIdStreamResponse, error) {
	m := new(GetVirtualIdStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) BackupRawdata(ctx context.Context, opts ...grpc.CallOption) (DeviceService_BackupRawdataClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceService_ServiceDesc.Streams[3], "/device.DeviceService/BackupRawdata", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceBackupRawdataClient{stream}
	return x, nil
}

type DeviceService_BackupRawdataClient interface {
	Send(*UpdateRawdataRequest) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type deviceServiceBackupRawdataClient struct {
	grpc.ClientStream
}

func (x *deviceServiceBackupRawdataClient) Send(m *UpdateRawdataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceServiceBackupRawdataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) GetVritualId(ctx context.Context, in *GetVirtualIdRequest, opts ...grpc.CallOption) (*GetVirtualIdResponse, error) {
	out := new(GetVirtualIdResponse)
	err := c.cc.Invoke(ctx, "/device.DeviceService/GetVritualId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetTime(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/device.DeviceService/SetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Remote(ctx context.Context, in *RemoteRequest, opts ...grpc.CallOption) (*RemoteResponse, error) {
	out := new(RemoteResponse)
	err := c.cc.Invoke(ctx, "/device.DeviceService/Remote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	// 更新裝置上傳數據
	UpdateRawdata(DeviceService_UpdateRawdataServer) error
	// 更新即時設定值
	UpdateRealtime(DeviceService_UpdateRealtimeServer) error
	// Get VirtualId by stream
	GetVritualIdStream(DeviceService_GetVritualIdStreamServer) error
	// BackupData
	BackupRawdata(DeviceService_BackupRawdataServer) error
	// Get VirtualId
	GetVritualId(context.Context, *GetVirtualIdRequest) (*GetVirtualIdResponse, error)
	// Set Time 校時
	SetTime(context.Context, *Device) (*Response, error)
	// 遠端控制
	Remote(context.Context, *RemoteRequest) (*RemoteResponse, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) UpdateRawdata(DeviceService_UpdateRawdataServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateRawdata not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateRealtime(DeviceService_UpdateRealtimeServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateRealtime not implemented")
}
func (UnimplementedDeviceServiceServer) GetVritualIdStream(DeviceService_GetVritualIdStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVritualIdStream not implemented")
}
func (UnimplementedDeviceServiceServer) BackupRawdata(DeviceService_BackupRawdataServer) error {
	return status.Errorf(codes.Unimplemented, "method BackupRawdata not implemented")
}
func (UnimplementedDeviceServiceServer) GetVritualId(context.Context, *GetVirtualIdRequest) (*GetVirtualIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVritualId not implemented")
}
func (UnimplementedDeviceServiceServer) SetTime(context.Context, *Device) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTime not implemented")
}
func (UnimplementedDeviceServiceServer) Remote(context.Context, *RemoteRequest) (*RemoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remote not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_UpdateRawdata_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceServiceServer).UpdateRawdata(&deviceServiceUpdateRawdataServer{stream})
}

type DeviceService_UpdateRawdataServer interface {
	Send(*Response) error
	Recv() (*UpdateRawdataRequest, error)
	grpc.ServerStream
}

type deviceServiceUpdateRawdataServer struct {
	grpc.ServerStream
}

func (x *deviceServiceUpdateRawdataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceServiceUpdateRawdataServer) Recv() (*UpdateRawdataRequest, error) {
	m := new(UpdateRawdataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceService_UpdateRealtime_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceServiceServer).UpdateRealtime(&deviceServiceUpdateRealtimeServer{stream})
}

type DeviceService_UpdateRealtimeServer interface {
	Send(*Response) error
	Recv() (*UpdateRawdataRequest, error)
	grpc.ServerStream
}

type deviceServiceUpdateRealtimeServer struct {
	grpc.ServerStream
}

func (x *deviceServiceUpdateRealtimeServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceServiceUpdateRealtimeServer) Recv() (*UpdateRawdataRequest, error) {
	m := new(UpdateRawdataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceService_GetVritualIdStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceServiceServer).GetVritualIdStream(&deviceServiceGetVritualIdStreamServer{stream})
}

type DeviceService_GetVritualIdStreamServer interface {
	Send(*GetVirtualIdStreamResponse) error
	Recv() (*GetVirtualIdRequest, error)
	grpc.ServerStream
}

type deviceServiceGetVritualIdStreamServer struct {
	grpc.ServerStream
}

func (x *deviceServiceGetVritualIdStreamServer) Send(m *GetVirtualIdStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceServiceGetVritualIdStreamServer) Recv() (*GetVirtualIdRequest, error) {
	m := new(GetVirtualIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceService_BackupRawdata_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceServiceServer).BackupRawdata(&deviceServiceBackupRawdataServer{stream})
}

type DeviceService_BackupRawdataServer interface {
	Send(*Response) error
	Recv() (*UpdateRawdataRequest, error)
	grpc.ServerStream
}

type deviceServiceBackupRawdataServer struct {
	grpc.ServerStream
}

func (x *deviceServiceBackupRawdataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceServiceBackupRawdataServer) Recv() (*UpdateRawdataRequest, error) {
	m := new(UpdateRawdataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceService_GetVritualId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetVritualId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/GetVritualId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetVritualId(ctx, req.(*GetVirtualIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/SetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetTime(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Remote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Remote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/Remote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Remote(ctx, req.(*RemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVritualId",
			Handler:    _DeviceService_GetVritualId_Handler,
		},
		{
			MethodName: "SetTime",
			Handler:    _DeviceService_SetTime_Handler,
		},
		{
			MethodName: "Remote",
			Handler:    _DeviceService_Remote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateRawdata",
			Handler:       _DeviceService_UpdateRawdata_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateRealtime",
			Handler:       _DeviceService_UpdateRealtime_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetVritualIdStream",
			Handler:       _DeviceService_GetVritualIdStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BackupRawdata",
			Handler:       _DeviceService_BackupRawdata_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "device/proto/device.proto",
}
