// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: device/proto/device_v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceV1ServiceClient is the client API for DeviceV1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceV1ServiceClient interface {
	// 建立v1裝置
	CreateV1(ctx context.Context, opts ...grpc.CallOption) (DeviceV1Service_CreateV1Client, error)
	// 檢查裝置是否存在
	CheckExist(ctx context.Context, in *CheckExistRequest, opts ...grpc.CallOption) (*CheckExistResponse, error)
	// 刪除裝置
	Delete(ctx context.Context, opts ...grpc.CallOption) (DeviceV1Service_DeleteClient, error)
	// 查看裝置連線狀態
	CheckState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	// 取得裝置資訊
	GetDeviceInfo(ctx context.Context, in *DeviceV1, opts ...grpc.CallOption) (*DeviceInfoResponse, error)
}

type deviceV1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceV1ServiceClient(cc grpc.ClientConnInterface) DeviceV1ServiceClient {
	return &deviceV1ServiceClient{cc}
}

func (c *deviceV1ServiceClient) CreateV1(ctx context.Context, opts ...grpc.CallOption) (DeviceV1Service_CreateV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceV1Service_ServiceDesc.Streams[0], "/device.DeviceV1Service/CreateV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceV1ServiceCreateV1Client{stream}
	return x, nil
}

type DeviceV1Service_CreateV1Client interface {
	Send(*CreateDeviceV1Request) error
	Recv() (*CreateDeviceV1Response, error)
	grpc.ClientStream
}

type deviceV1ServiceCreateV1Client struct {
	grpc.ClientStream
}

func (x *deviceV1ServiceCreateV1Client) Send(m *CreateDeviceV1Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceV1ServiceCreateV1Client) Recv() (*CreateDeviceV1Response, error) {
	m := new(CreateDeviceV1Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceV1ServiceClient) CheckExist(ctx context.Context, in *CheckExistRequest, opts ...grpc.CallOption) (*CheckExistResponse, error) {
	out := new(CheckExistResponse)
	err := c.cc.Invoke(ctx, "/device.DeviceV1Service/CheckExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceV1ServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (DeviceV1Service_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceV1Service_ServiceDesc.Streams[1], "/device.DeviceV1Service/Delete", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceV1ServiceDeleteClient{stream}
	return x, nil
}

type DeviceV1Service_DeleteClient interface {
	Send(*RemoveDeviceV1Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type deviceV1ServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *deviceV1ServiceDeleteClient) Send(m *RemoveDeviceV1Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceV1ServiceDeleteClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceV1ServiceClient) CheckState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/device.DeviceV1Service/CheckState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceV1ServiceClient) GetDeviceInfo(ctx context.Context, in *DeviceV1, opts ...grpc.CallOption) (*DeviceInfoResponse, error) {
	out := new(DeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/device.DeviceV1Service/GetDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceV1ServiceServer is the server API for DeviceV1Service service.
// All implementations must embed UnimplementedDeviceV1ServiceServer
// for forward compatibility
type DeviceV1ServiceServer interface {
	// 建立v1裝置
	CreateV1(DeviceV1Service_CreateV1Server) error
	// 檢查裝置是否存在
	CheckExist(context.Context, *CheckExistRequest) (*CheckExistResponse, error)
	// 刪除裝置
	Delete(DeviceV1Service_DeleteServer) error
	// 查看裝置連線狀態
	CheckState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	// 取得裝置資訊
	GetDeviceInfo(context.Context, *DeviceV1) (*DeviceInfoResponse, error)
	mustEmbedUnimplementedDeviceV1ServiceServer()
}

// UnimplementedDeviceV1ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceV1ServiceServer struct {
}

func (UnimplementedDeviceV1ServiceServer) CreateV1(DeviceV1Service_CreateV1Server) error {
	return status.Errorf(codes.Unimplemented, "method CreateV1 not implemented")
}
func (UnimplementedDeviceV1ServiceServer) CheckExist(context.Context, *CheckExistRequest) (*CheckExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckExist not implemented")
}
func (UnimplementedDeviceV1ServiceServer) Delete(DeviceV1Service_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeviceV1ServiceServer) CheckState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckState not implemented")
}
func (UnimplementedDeviceV1ServiceServer) GetDeviceInfo(context.Context, *DeviceV1) (*DeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedDeviceV1ServiceServer) mustEmbedUnimplementedDeviceV1ServiceServer() {}

// UnsafeDeviceV1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceV1ServiceServer will
// result in compilation errors.
type UnsafeDeviceV1ServiceServer interface {
	mustEmbedUnimplementedDeviceV1ServiceServer()
}

func RegisterDeviceV1ServiceServer(s grpc.ServiceRegistrar, srv DeviceV1ServiceServer) {
	s.RegisterService(&DeviceV1Service_ServiceDesc, srv)
}

func _DeviceV1Service_CreateV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceV1ServiceServer).CreateV1(&deviceV1ServiceCreateV1Server{stream})
}

type DeviceV1Service_CreateV1Server interface {
	Send(*CreateDeviceV1Response) error
	Recv() (*CreateDeviceV1Request, error)
	grpc.ServerStream
}

type deviceV1ServiceCreateV1Server struct {
	grpc.ServerStream
}

func (x *deviceV1ServiceCreateV1Server) Send(m *CreateDeviceV1Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceV1ServiceCreateV1Server) Recv() (*CreateDeviceV1Request, error) {
	m := new(CreateDeviceV1Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceV1Service_CheckExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceV1ServiceServer).CheckExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceV1Service/CheckExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceV1ServiceServer).CheckExist(ctx, req.(*CheckExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceV1Service_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceV1ServiceServer).Delete(&deviceV1ServiceDeleteServer{stream})
}

type DeviceV1Service_DeleteServer interface {
	Send(*Response) error
	Recv() (*RemoveDeviceV1Request, error)
	grpc.ServerStream
}

type deviceV1ServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *deviceV1ServiceDeleteServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceV1ServiceDeleteServer) Recv() (*RemoveDeviceV1Request, error) {
	m := new(RemoveDeviceV1Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceV1Service_CheckState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceV1ServiceServer).CheckState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceV1Service/CheckState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceV1ServiceServer).CheckState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceV1Service_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceV1ServiceServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceV1Service/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceV1ServiceServer).GetDeviceInfo(ctx, req.(*DeviceV1))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceV1Service_ServiceDesc is the grpc.ServiceDesc for DeviceV1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceV1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.DeviceV1Service",
	HandlerType: (*DeviceV1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckExist",
			Handler:    _DeviceV1Service_CheckExist_Handler,
		},
		{
			MethodName: "CheckState",
			Handler:    _DeviceV1Service_CheckState_Handler,
		},
		{
			MethodName: "GetDeviceInfo",
			Handler:    _DeviceV1Service_GetDeviceInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateV1",
			Handler:       _DeviceV1Service_CreateV1_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _DeviceV1Service_Delete_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "device/proto/device_v1.proto",
}
