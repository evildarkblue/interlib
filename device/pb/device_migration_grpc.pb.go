// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: device/proto/device_migration.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceMigrationServiceClient is the client API for DeviceMigrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceMigrationServiceClient interface {
	// 搬移使用者資訊
	MigrationDevice(ctx context.Context, opts ...grpc.CallOption) (DeviceMigrationService_MigrationDeviceClient, error)
}

type deviceMigrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceMigrationServiceClient(cc grpc.ClientConnInterface) DeviceMigrationServiceClient {
	return &deviceMigrationServiceClient{cc}
}

func (c *deviceMigrationServiceClient) MigrationDevice(ctx context.Context, opts ...grpc.CallOption) (DeviceMigrationService_MigrationDeviceClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceMigrationService_ServiceDesc.Streams[0], "/device.DeviceMigrationService/MigrationDevice", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceMigrationServiceMigrationDeviceClient{stream}
	return x, nil
}

type DeviceMigrationService_MigrationDeviceClient interface {
	Send(*MigrationDeviceRequest) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type deviceMigrationServiceMigrationDeviceClient struct {
	grpc.ClientStream
}

func (x *deviceMigrationServiceMigrationDeviceClient) Send(m *MigrationDeviceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceMigrationServiceMigrationDeviceClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceMigrationServiceServer is the server API for DeviceMigrationService service.
// All implementations must embed UnimplementedDeviceMigrationServiceServer
// for forward compatibility
type DeviceMigrationServiceServer interface {
	// 搬移使用者資訊
	MigrationDevice(DeviceMigrationService_MigrationDeviceServer) error
	mustEmbedUnimplementedDeviceMigrationServiceServer()
}

// UnimplementedDeviceMigrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceMigrationServiceServer struct {
}

func (UnimplementedDeviceMigrationServiceServer) MigrationDevice(DeviceMigrationService_MigrationDeviceServer) error {
	return status.Errorf(codes.Unimplemented, "method MigrationDevice not implemented")
}
func (UnimplementedDeviceMigrationServiceServer) mustEmbedUnimplementedDeviceMigrationServiceServer() {
}

// UnsafeDeviceMigrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceMigrationServiceServer will
// result in compilation errors.
type UnsafeDeviceMigrationServiceServer interface {
	mustEmbedUnimplementedDeviceMigrationServiceServer()
}

func RegisterDeviceMigrationServiceServer(s grpc.ServiceRegistrar, srv DeviceMigrationServiceServer) {
	s.RegisterService(&DeviceMigrationService_ServiceDesc, srv)
}

func _DeviceMigrationService_MigrationDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceMigrationServiceServer).MigrationDevice(&deviceMigrationServiceMigrationDeviceServer{stream})
}

type DeviceMigrationService_MigrationDeviceServer interface {
	Send(*Response) error
	Recv() (*MigrationDeviceRequest, error)
	grpc.ServerStream
}

type deviceMigrationServiceMigrationDeviceServer struct {
	grpc.ServerStream
}

func (x *deviceMigrationServiceMigrationDeviceServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceMigrationServiceMigrationDeviceServer) Recv() (*MigrationDeviceRequest, error) {
	m := new(MigrationDeviceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceMigrationService_ServiceDesc is the grpc.ServiceDesc for DeviceMigrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceMigrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.DeviceMigrationService",
	HandlerType: (*DeviceMigrationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MigrationDevice",
			Handler:       _DeviceMigrationService_MigrationDevice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "device/proto/device_migration.proto",
}
