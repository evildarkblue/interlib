// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: device/app/proto/device.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppDeviceServiceClient is the client API for AppDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppDeviceServiceClient interface {
	// 建立配送單
	CreateSendTxn(ctx context.Context, in *CreateSendTxnRequest, opts ...grpc.CallOption) (AppDeviceService_CreateSendTxnClient, error)
	// 修改配送單
	ModifySendTxn(ctx context.Context, in *ModifySendTxnRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 取消配送單
	CancelSendTxn(ctx context.Context, in *ApplyTxn, opts ...grpc.CallOption) (*CommonResponse, error)
	// 取得配送單/回收單
	ListTxn(ctx context.Context, in *QueryTxnRequest, opts ...grpc.CallOption) (AppDeviceService_ListTxnClient, error)
	// Txn 新增 Comment
	TxnAddComment(ctx context.Context, in *TxnAddCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 搬移 Txn
	MigrationTxn(ctx context.Context, in *MigrationTxnRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 刪除 Txn
	RemoveTxn(ctx context.Context, in *RemoveTxnRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 確認回收單
	ConfirmRecycle(ctx context.Context, in *ApplyTxn, opts ...grpc.CallOption) (*CommonResponse, error)
	// 裝置分配案場編輯
	// rpc DeviceProjectEdit(DeviceRelationEditRequest) returns (stream DeviceRelationEditResponse){};
	// 裝置對應設備編輯
	// rpc DeviceEquipmentEdit(DeviceRelationEditRequest) returns (stream DeviceRelationEditResponse){};
	// 依設備取得對應所有裝置
	GetDevicesByEquips(ctx context.Context, in *GetDevicesByEquipsRequest, opts ...grpc.CallOption) (AppDeviceService_GetDevicesByEquipsClient, error)
}

type appDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppDeviceServiceClient(cc grpc.ClientConnInterface) AppDeviceServiceClient {
	return &appDeviceServiceClient{cc}
}

func (c *appDeviceServiceClient) CreateSendTxn(ctx context.Context, in *CreateSendTxnRequest, opts ...grpc.CallOption) (AppDeviceService_CreateSendTxnClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppDeviceService_ServiceDesc.Streams[0], "/service.AppDeviceService/CreateSendTxn", opts...)
	if err != nil {
		return nil, err
	}
	x := &appDeviceServiceCreateSendTxnClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppDeviceService_CreateSendTxnClient interface {
	Recv() (*CreateSendTxnResponse, error)
	grpc.ClientStream
}

type appDeviceServiceCreateSendTxnClient struct {
	grpc.ClientStream
}

func (x *appDeviceServiceCreateSendTxnClient) Recv() (*CreateSendTxnResponse, error) {
	m := new(CreateSendTxnResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appDeviceServiceClient) ModifySendTxn(ctx context.Context, in *ModifySendTxnRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/service.AppDeviceService/ModifySendTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDeviceServiceClient) CancelSendTxn(ctx context.Context, in *ApplyTxn, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/service.AppDeviceService/CancelSendTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDeviceServiceClient) ListTxn(ctx context.Context, in *QueryTxnRequest, opts ...grpc.CallOption) (AppDeviceService_ListTxnClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppDeviceService_ServiceDesc.Streams[1], "/service.AppDeviceService/ListTxn", opts...)
	if err != nil {
		return nil, err
	}
	x := &appDeviceServiceListTxnClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppDeviceService_ListTxnClient interface {
	Recv() (*QueryTxnResponse, error)
	grpc.ClientStream
}

type appDeviceServiceListTxnClient struct {
	grpc.ClientStream
}

func (x *appDeviceServiceListTxnClient) Recv() (*QueryTxnResponse, error) {
	m := new(QueryTxnResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appDeviceServiceClient) TxnAddComment(ctx context.Context, in *TxnAddCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/service.AppDeviceService/TxnAddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDeviceServiceClient) MigrationTxn(ctx context.Context, in *MigrationTxnRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/service.AppDeviceService/MigrationTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDeviceServiceClient) RemoveTxn(ctx context.Context, in *RemoveTxnRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/service.AppDeviceService/RemoveTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDeviceServiceClient) ConfirmRecycle(ctx context.Context, in *ApplyTxn, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/service.AppDeviceService/ConfirmRecycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDeviceServiceClient) GetDevicesByEquips(ctx context.Context, in *GetDevicesByEquipsRequest, opts ...grpc.CallOption) (AppDeviceService_GetDevicesByEquipsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppDeviceService_ServiceDesc.Streams[2], "/service.AppDeviceService/GetDevicesByEquips", opts...)
	if err != nil {
		return nil, err
	}
	x := &appDeviceServiceGetDevicesByEquipsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppDeviceService_GetDevicesByEquipsClient interface {
	Recv() (*GetDevicesByEquipsResponse, error)
	grpc.ClientStream
}

type appDeviceServiceGetDevicesByEquipsClient struct {
	grpc.ClientStream
}

func (x *appDeviceServiceGetDevicesByEquipsClient) Recv() (*GetDevicesByEquipsResponse, error) {
	m := new(GetDevicesByEquipsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppDeviceServiceServer is the server API for AppDeviceService service.
// All implementations must embed UnimplementedAppDeviceServiceServer
// for forward compatibility
type AppDeviceServiceServer interface {
	// 建立配送單
	CreateSendTxn(*CreateSendTxnRequest, AppDeviceService_CreateSendTxnServer) error
	// 修改配送單
	ModifySendTxn(context.Context, *ModifySendTxnRequest) (*CommonResponse, error)
	// 取消配送單
	CancelSendTxn(context.Context, *ApplyTxn) (*CommonResponse, error)
	// 取得配送單/回收單
	ListTxn(*QueryTxnRequest, AppDeviceService_ListTxnServer) error
	// Txn 新增 Comment
	TxnAddComment(context.Context, *TxnAddCommentRequest) (*CommonResponse, error)
	// 搬移 Txn
	MigrationTxn(context.Context, *MigrationTxnRequest) (*CommonResponse, error)
	// 刪除 Txn
	RemoveTxn(context.Context, *RemoveTxnRequest) (*CommonResponse, error)
	// 確認回收單
	ConfirmRecycle(context.Context, *ApplyTxn) (*CommonResponse, error)
	// 裝置分配案場編輯
	// rpc DeviceProjectEdit(DeviceRelationEditRequest) returns (stream DeviceRelationEditResponse){};
	// 裝置對應設備編輯
	// rpc DeviceEquipmentEdit(DeviceRelationEditRequest) returns (stream DeviceRelationEditResponse){};
	// 依設備取得對應所有裝置
	GetDevicesByEquips(*GetDevicesByEquipsRequest, AppDeviceService_GetDevicesByEquipsServer) error
	mustEmbedUnimplementedAppDeviceServiceServer()
}

// UnimplementedAppDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppDeviceServiceServer struct {
}

func (UnimplementedAppDeviceServiceServer) CreateSendTxn(*CreateSendTxnRequest, AppDeviceService_CreateSendTxnServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateSendTxn not implemented")
}
func (UnimplementedAppDeviceServiceServer) ModifySendTxn(context.Context, *ModifySendTxnRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySendTxn not implemented")
}
func (UnimplementedAppDeviceServiceServer) CancelSendTxn(context.Context, *ApplyTxn) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSendTxn not implemented")
}
func (UnimplementedAppDeviceServiceServer) ListTxn(*QueryTxnRequest, AppDeviceService_ListTxnServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTxn not implemented")
}
func (UnimplementedAppDeviceServiceServer) TxnAddComment(context.Context, *TxnAddCommentRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxnAddComment not implemented")
}
func (UnimplementedAppDeviceServiceServer) MigrationTxn(context.Context, *MigrationTxnRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrationTxn not implemented")
}
func (UnimplementedAppDeviceServiceServer) RemoveTxn(context.Context, *RemoveTxnRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTxn not implemented")
}
func (UnimplementedAppDeviceServiceServer) ConfirmRecycle(context.Context, *ApplyTxn) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmRecycle not implemented")
}
func (UnimplementedAppDeviceServiceServer) GetDevicesByEquips(*GetDevicesByEquipsRequest, AppDeviceService_GetDevicesByEquipsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDevicesByEquips not implemented")
}
func (UnimplementedAppDeviceServiceServer) mustEmbedUnimplementedAppDeviceServiceServer() {}

// UnsafeAppDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppDeviceServiceServer will
// result in compilation errors.
type UnsafeAppDeviceServiceServer interface {
	mustEmbedUnimplementedAppDeviceServiceServer()
}

func RegisterAppDeviceServiceServer(s grpc.ServiceRegistrar, srv AppDeviceServiceServer) {
	s.RegisterService(&AppDeviceService_ServiceDesc, srv)
}

func _AppDeviceService_CreateSendTxn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateSendTxnRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppDeviceServiceServer).CreateSendTxn(m, &appDeviceServiceCreateSendTxnServer{stream})
}

type AppDeviceService_CreateSendTxnServer interface {
	Send(*CreateSendTxnResponse) error
	grpc.ServerStream
}

type appDeviceServiceCreateSendTxnServer struct {
	grpc.ServerStream
}

func (x *appDeviceServiceCreateSendTxnServer) Send(m *CreateSendTxnResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AppDeviceService_ModifySendTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySendTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDeviceServiceServer).ModifySendTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AppDeviceService/ModifySendTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDeviceServiceServer).ModifySendTxn(ctx, req.(*ModifySendTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDeviceService_CancelSendTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDeviceServiceServer).CancelSendTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AppDeviceService/CancelSendTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDeviceServiceServer).CancelSendTxn(ctx, req.(*ApplyTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDeviceService_ListTxn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryTxnRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppDeviceServiceServer).ListTxn(m, &appDeviceServiceListTxnServer{stream})
}

type AppDeviceService_ListTxnServer interface {
	Send(*QueryTxnResponse) error
	grpc.ServerStream
}

type appDeviceServiceListTxnServer struct {
	grpc.ServerStream
}

func (x *appDeviceServiceListTxnServer) Send(m *QueryTxnResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AppDeviceService_TxnAddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnAddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDeviceServiceServer).TxnAddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AppDeviceService/TxnAddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDeviceServiceServer).TxnAddComment(ctx, req.(*TxnAddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDeviceService_MigrationTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrationTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDeviceServiceServer).MigrationTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AppDeviceService/MigrationTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDeviceServiceServer).MigrationTxn(ctx, req.(*MigrationTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDeviceService_RemoveTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDeviceServiceServer).RemoveTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AppDeviceService/RemoveTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDeviceServiceServer).RemoveTxn(ctx, req.(*RemoveTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDeviceService_ConfirmRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyTxn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDeviceServiceServer).ConfirmRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AppDeviceService/ConfirmRecycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDeviceServiceServer).ConfirmRecycle(ctx, req.(*ApplyTxn))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDeviceService_GetDevicesByEquips_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDevicesByEquipsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppDeviceServiceServer).GetDevicesByEquips(m, &appDeviceServiceGetDevicesByEquipsServer{stream})
}

type AppDeviceService_GetDevicesByEquipsServer interface {
	Send(*GetDevicesByEquipsResponse) error
	grpc.ServerStream
}

type appDeviceServiceGetDevicesByEquipsServer struct {
	grpc.ServerStream
}

func (x *appDeviceServiceGetDevicesByEquipsServer) Send(m *GetDevicesByEquipsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AppDeviceService_ServiceDesc is the grpc.ServiceDesc for AppDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.AppDeviceService",
	HandlerType: (*AppDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModifySendTxn",
			Handler:    _AppDeviceService_ModifySendTxn_Handler,
		},
		{
			MethodName: "CancelSendTxn",
			Handler:    _AppDeviceService_CancelSendTxn_Handler,
		},
		{
			MethodName: "TxnAddComment",
			Handler:    _AppDeviceService_TxnAddComment_Handler,
		},
		{
			MethodName: "MigrationTxn",
			Handler:    _AppDeviceService_MigrationTxn_Handler,
		},
		{
			MethodName: "RemoveTxn",
			Handler:    _AppDeviceService_RemoveTxn_Handler,
		},
		{
			MethodName: "ConfirmRecycle",
			Handler:    _AppDeviceService_ConfirmRecycle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateSendTxn",
			Handler:       _AppDeviceService_CreateSendTxn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTxn",
			Handler:       _AppDeviceService_ListTxn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDevicesByEquips",
			Handler:       _AppDeviceService_GetDevicesByEquips_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device/app/proto/device.proto",
}
