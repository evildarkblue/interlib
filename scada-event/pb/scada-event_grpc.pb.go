// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: scada-event/proto/scada-event.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScadaEventServiceClient is the client API for ScadaEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScadaEventServiceClient interface {
	CreateWarning(ctx context.Context, in *CreateWarningsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CloseWarning(ctx context.Context, in *CloseWarningReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExtendWarning(ctx context.Context, in *ExtendWarningReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadWarnings(ctx context.Context, in *ReadWarningsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRealtime(ctx context.Context, in *GetRealtimeReq, opts ...grpc.CallOption) (*GetRealtimeResp, error)
	CreateEvent(ctx context.Context, in *CreateEventReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type scadaEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScadaEventServiceClient(cc grpc.ClientConnInterface) ScadaEventServiceClient {
	return &scadaEventServiceClient{cc}
}

func (c *scadaEventServiceClient) CreateWarning(ctx context.Context, in *CreateWarningsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scada_layout.ScadaEventService/createWarning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scadaEventServiceClient) CloseWarning(ctx context.Context, in *CloseWarningReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scada_layout.ScadaEventService/closeWarning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scadaEventServiceClient) ExtendWarning(ctx context.Context, in *ExtendWarningReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scada_layout.ScadaEventService/extendWarning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scadaEventServiceClient) ReadWarnings(ctx context.Context, in *ReadWarningsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scada_layout.ScadaEventService/readWarnings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scadaEventServiceClient) GetRealtime(ctx context.Context, in *GetRealtimeReq, opts ...grpc.CallOption) (*GetRealtimeResp, error) {
	out := new(GetRealtimeResp)
	err := c.cc.Invoke(ctx, "/scada_layout.ScadaEventService/getRealtime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scadaEventServiceClient) CreateEvent(ctx context.Context, in *CreateEventReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scada_layout.ScadaEventService/createEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScadaEventServiceServer is the server API for ScadaEventService service.
// All implementations must embed UnimplementedScadaEventServiceServer
// for forward compatibility
type ScadaEventServiceServer interface {
	CreateWarning(context.Context, *CreateWarningsReq) (*emptypb.Empty, error)
	CloseWarning(context.Context, *CloseWarningReq) (*emptypb.Empty, error)
	ExtendWarning(context.Context, *ExtendWarningReq) (*emptypb.Empty, error)
	ReadWarnings(context.Context, *ReadWarningsReq) (*emptypb.Empty, error)
	GetRealtime(context.Context, *GetRealtimeReq) (*GetRealtimeResp, error)
	CreateEvent(context.Context, *CreateEventReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedScadaEventServiceServer()
}

// UnimplementedScadaEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScadaEventServiceServer struct {
}

func (UnimplementedScadaEventServiceServer) CreateWarning(context.Context, *CreateWarningsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWarning not implemented")
}
func (UnimplementedScadaEventServiceServer) CloseWarning(context.Context, *CloseWarningReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseWarning not implemented")
}
func (UnimplementedScadaEventServiceServer) ExtendWarning(context.Context, *ExtendWarningReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendWarning not implemented")
}
func (UnimplementedScadaEventServiceServer) ReadWarnings(context.Context, *ReadWarningsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWarnings not implemented")
}
func (UnimplementedScadaEventServiceServer) GetRealtime(context.Context, *GetRealtimeReq) (*GetRealtimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtime not implemented")
}
func (UnimplementedScadaEventServiceServer) CreateEvent(context.Context, *CreateEventReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedScadaEventServiceServer) mustEmbedUnimplementedScadaEventServiceServer() {}

// UnsafeScadaEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScadaEventServiceServer will
// result in compilation errors.
type UnsafeScadaEventServiceServer interface {
	mustEmbedUnimplementedScadaEventServiceServer()
}

func RegisterScadaEventServiceServer(s grpc.ServiceRegistrar, srv ScadaEventServiceServer) {
	s.RegisterService(&ScadaEventService_ServiceDesc, srv)
}

func _ScadaEventService_CreateWarning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWarningsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScadaEventServiceServer).CreateWarning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scada_layout.ScadaEventService/createWarning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScadaEventServiceServer).CreateWarning(ctx, req.(*CreateWarningsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScadaEventService_CloseWarning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseWarningReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScadaEventServiceServer).CloseWarning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scada_layout.ScadaEventService/closeWarning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScadaEventServiceServer).CloseWarning(ctx, req.(*CloseWarningReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScadaEventService_ExtendWarning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendWarningReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScadaEventServiceServer).ExtendWarning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scada_layout.ScadaEventService/extendWarning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScadaEventServiceServer).ExtendWarning(ctx, req.(*ExtendWarningReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScadaEventService_ReadWarnings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadWarningsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScadaEventServiceServer).ReadWarnings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scada_layout.ScadaEventService/readWarnings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScadaEventServiceServer).ReadWarnings(ctx, req.(*ReadWarningsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScadaEventService_GetRealtime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScadaEventServiceServer).GetRealtime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scada_layout.ScadaEventService/getRealtime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScadaEventServiceServer).GetRealtime(ctx, req.(*GetRealtimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScadaEventService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScadaEventServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scada_layout.ScadaEventService/createEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScadaEventServiceServer).CreateEvent(ctx, req.(*CreateEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ScadaEventService_ServiceDesc is the grpc.ServiceDesc for ScadaEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScadaEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scada_layout.ScadaEventService",
	HandlerType: (*ScadaEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createWarning",
			Handler:    _ScadaEventService_CreateWarning_Handler,
		},
		{
			MethodName: "closeWarning",
			Handler:    _ScadaEventService_CloseWarning_Handler,
		},
		{
			MethodName: "extendWarning",
			Handler:    _ScadaEventService_ExtendWarning_Handler,
		},
		{
			MethodName: "readWarnings",
			Handler:    _ScadaEventService_ReadWarnings_Handler,
		},
		{
			MethodName: "getRealtime",
			Handler:    _ScadaEventService_GetRealtime_Handler,
		},
		{
			MethodName: "createEvent",
			Handler:    _ScadaEventService_CreateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scada-event/proto/scada-event.proto",
}
