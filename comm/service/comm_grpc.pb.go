// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: comm/proto/comm.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommServiceClient is the client API for CommService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommServiceClient interface {
	// 遠端校時
	Iot627Timing(ctx context.Context, opts ...grpc.CallOption) (CommService_Iot627TimingClient, error)
	// 遠端控制
	Iot627Remote(ctx context.Context, in *Iot627RemoteRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 回傳所有控制數值
	Iot627GetControlValue(ctx context.Context, in *Iot627GetControlValueRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type commServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommServiceClient(cc grpc.ClientConnInterface) CommServiceClient {
	return &commServiceClient{cc}
}

func (c *commServiceClient) Iot627Timing(ctx context.Context, opts ...grpc.CallOption) (CommService_Iot627TimingClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommService_ServiceDesc.Streams[0], "/service.CommService/Iot627Timing", opts...)
	if err != nil {
		return nil, err
	}
	x := &commServiceIot627TimingClient{stream}
	return x, nil
}

type CommService_Iot627TimingClient interface {
	Send(*Iot627TimingRequest) error
	Recv() (*CommonResponse, error)
	grpc.ClientStream
}

type commServiceIot627TimingClient struct {
	grpc.ClientStream
}

func (x *commServiceIot627TimingClient) Send(m *Iot627TimingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commServiceIot627TimingClient) Recv() (*CommonResponse, error) {
	m := new(CommonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commServiceClient) Iot627Remote(ctx context.Context, in *Iot627RemoteRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/service.CommService/Iot627Remote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServiceClient) Iot627GetControlValue(ctx context.Context, in *Iot627GetControlValueRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/service.CommService/Iot627GetControlValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommServiceServer is the server API for CommService service.
// All implementations must embed UnimplementedCommServiceServer
// for forward compatibility
type CommServiceServer interface {
	// 遠端校時
	Iot627Timing(CommService_Iot627TimingServer) error
	// 遠端控制
	Iot627Remote(context.Context, *Iot627RemoteRequest) (*CommonResponse, error)
	// 回傳所有控制數值
	Iot627GetControlValue(context.Context, *Iot627GetControlValueRequest) (*CommonResponse, error)
	mustEmbedUnimplementedCommServiceServer()
}

// UnimplementedCommServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommServiceServer struct {
}

func (UnimplementedCommServiceServer) Iot627Timing(CommService_Iot627TimingServer) error {
	return status.Errorf(codes.Unimplemented, "method Iot627Timing not implemented")
}
func (UnimplementedCommServiceServer) Iot627Remote(context.Context, *Iot627RemoteRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Iot627Remote not implemented")
}
func (UnimplementedCommServiceServer) Iot627GetControlValue(context.Context, *Iot627GetControlValueRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Iot627GetControlValue not implemented")
}
func (UnimplementedCommServiceServer) mustEmbedUnimplementedCommServiceServer() {}

// UnsafeCommServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommServiceServer will
// result in compilation errors.
type UnsafeCommServiceServer interface {
	mustEmbedUnimplementedCommServiceServer()
}

func RegisterCommServiceServer(s grpc.ServiceRegistrar, srv CommServiceServer) {
	s.RegisterService(&CommService_ServiceDesc, srv)
}

func _CommService_Iot627Timing_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommServiceServer).Iot627Timing(&commServiceIot627TimingServer{stream})
}

type CommService_Iot627TimingServer interface {
	Send(*CommonResponse) error
	Recv() (*Iot627TimingRequest, error)
	grpc.ServerStream
}

type commServiceIot627TimingServer struct {
	grpc.ServerStream
}

func (x *commServiceIot627TimingServer) Send(m *CommonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commServiceIot627TimingServer) Recv() (*Iot627TimingRequest, error) {
	m := new(Iot627TimingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CommService_Iot627Remote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Iot627RemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServiceServer).Iot627Remote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CommService/Iot627Remote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServiceServer).Iot627Remote(ctx, req.(*Iot627RemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommService_Iot627GetControlValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Iot627GetControlValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServiceServer).Iot627GetControlValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CommService/Iot627GetControlValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServiceServer).Iot627GetControlValue(ctx, req.(*Iot627GetControlValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommService_ServiceDesc is the grpc.ServiceDesc for CommService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.CommService",
	HandlerType: (*CommServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Iot627Remote",
			Handler:    _CommService_Iot627Remote_Handler,
		},
		{
			MethodName: "Iot627GetControlValue",
			Handler:    _CommService_Iot627GetControlValue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Iot627Timing",
			Handler:       _CommService_Iot627Timing_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "comm/proto/comm.proto",
}
