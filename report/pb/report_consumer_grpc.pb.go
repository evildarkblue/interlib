// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: report/proto/report_consumer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComsumerServiceClient is the client API for ComsumerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComsumerServiceClient interface {
	// 產生報表
	GenerateReport(ctx context.Context, in *GenerateReportReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type comsumerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComsumerServiceClient(cc grpc.ClientConnInterface) ComsumerServiceClient {
	return &comsumerServiceClient{cc}
}

func (c *comsumerServiceClient) GenerateReport(ctx context.Context, in *GenerateReportReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/report.ComsumerService/GenerateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComsumerServiceServer is the server API for ComsumerService service.
// All implementations must embed UnimplementedComsumerServiceServer
// for forward compatibility
type ComsumerServiceServer interface {
	// 產生報表
	GenerateReport(context.Context, *GenerateReportReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedComsumerServiceServer()
}

// UnimplementedComsumerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComsumerServiceServer struct {
}

func (UnimplementedComsumerServiceServer) GenerateReport(context.Context, *GenerateReportReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReport not implemented")
}
func (UnimplementedComsumerServiceServer) mustEmbedUnimplementedComsumerServiceServer() {}

// UnsafeComsumerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComsumerServiceServer will
// result in compilation errors.
type UnsafeComsumerServiceServer interface {
	mustEmbedUnimplementedComsumerServiceServer()
}

func RegisterComsumerServiceServer(s grpc.ServiceRegistrar, srv ComsumerServiceServer) {
	s.RegisterService(&ComsumerService_ServiceDesc, srv)
}

func _ComsumerService_GenerateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComsumerServiceServer).GenerateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/report.ComsumerService/GenerateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComsumerServiceServer).GenerateReport(ctx, req.(*GenerateReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ComsumerService_ServiceDesc is the grpc.ServiceDesc for ComsumerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComsumerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "report.ComsumerService",
	HandlerType: (*ComsumerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateReport",
			Handler:    _ComsumerService_GenerateReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "report/proto/report_consumer.proto",
}
